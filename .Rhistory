<<-
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(3)
makeVector(3,2)
makeVector(3)
makeVector(1123)
m=3
x=2
makeVector(1123)
makeVector()
y=makeVector()
y
y
y$set()
y=y$set()
x=y$set()
View(makeVector)
m
y$getmean()
y$getmean(2)
y$set(2)
y$getmean(2)
y$getmean()
y$setmean()
y$setmean(2)
y$getmean()
y$get()
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean()
cachemean(y)
cachemean(y)
y<- makeVector(c(1,2,3,4,5))
y
y$get()
y$set()
y$set(1,2,3,4,5,6)
y$set(c(1,2,3,4,5,6))
y$get()
y$setmean
cachemean(y)
y$setmean()
y$getmean()
y$x
View(makeVector)
View(cachemean)
y
env.profile()
environment()
env.profile(R_GlobalEnv)
function() x
test<- function()x
test
test(4)
test
test<- function() x
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(solve) i <<- solve
getinverse <- function() i
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
A = matrix(
+   c(2, 4, 3, 1, 5, 7), # the data elements
+   nrow=2,              # number of rows
+   ncol=3,              # number of columns
+   byrow = TRUE)        # fill matrix by rows
> A                      # print the matrix
A = matrix(c(2, 4, 3, 1, 5, 7),nrow=2, ncol=3,byrow = TRUE)
> A                      # print the matrix
a
A
M=makeCacheMatrix()
m
M
M$set(A)
M$get()
function
()
x
x
function() {x}
function() x
test<- function() {x}
x
test
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinverse()
if(!is.null(i)){
message("solving inverse")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
cacheSolve(M)
A = matrix(c(2, 4, 3, 1, 5, 7,8,9,10),nrow=3, ncol=3,byrow = TRUE)
A
M$set(A)
cacheSolve(M)
M$getinverse()
